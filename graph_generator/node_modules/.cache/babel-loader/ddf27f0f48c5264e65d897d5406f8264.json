{"ast":null,"code":"var _jsxFileName = \"/Users/finn/Documents/skole/master_thesis/graph_generator/src/Main.js\";\nimport React, { PureComponent } from \"react\";\nimport \"./App.css\";\nimport { baseData, cycleData, adjustedCycleData, nnData, adjustedNnData, totalData, freeData } from \"./memoryData\";\nimport MemoryBarChart from \"./MemoryBarChart\";\nimport MemoryPieChart from \"./MemoryPieChart\";\nimport { cycleRuntimeData, integratedCycleRuntimeData } from \"./runtimeData\";\nimport RuntimeLineChart from \"./RuntimeLineChart\";\nimport StackedBarChart from \"./StackedBarChart\";\nimport { stackedData } from \"./stackedData\";\nimport { lineData } from \"./lineData\";\nimport LineBarChart from \"./LineChart\";\nexport default class Main extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      toDisplay: \"line\"\n    };\n\n    this.formatDataForPie = dataIndex => {\n      const dataNames = [\"Overhead\", \"Cyclic\", \"Neural network\", \"Free\"];\n      return [baseData, adjustedCycleData, adjustedNnData, freeData].map((dataPoint, i) => ({\n        name: dataNames[i],\n        value: dataPoint[dataIndex].used\n      }));\n    };\n\n    this.renderMemoryCharts = () => {\n      console.log(\"rendering memory\");\n      return React.createElement(\"div\", {\n        className: \"chartsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"barCharts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Individual data points\"), React.createElement(MemoryBarChart, {\n        title: \"Common memory overhead\",\n        data: baseData,\n        heavyFillColor: \"#fcba03\",\n        lightFillColor: \"#ffe18f\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(MemoryBarChart, {\n        title: \"Cyclic sensor memory footprint\",\n        data: cycleData,\n        heavyFillColor: \"#199c52\",\n        lightFillColor: \"#82ca9d\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(MemoryBarChart, {\n        title: \"Neural Network memory consumption\",\n        data: nnData,\n        heavyFillColor: \"#65bfe0\",\n        lightFillColor: \"#b3e8fc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"totalChart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Total\"), React.createElement(MemoryBarChart, {\n        title: \"Total memory usage at compile time\",\n        data: totalData,\n        heavyFillColor: \"#35374a\",\n        lightFillColor: \"#adafc4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(MemoryPieChart, {\n        title: \"Program memory distribution\",\n        data: this.formatDataForPie(0),\n        colors: [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(MemoryPieChart, {\n        title: \"Dynamic memory distribution\",\n        data: this.formatDataForPie(1),\n        colors: [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })));\n    };\n\n    this.renderRuntimeCharts = () => {\n      console.log(\"rendering runtime\");\n      return React.createElement(\"div\", {\n        className: \"chartsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"barCharts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Sense Cycle Runtime\"), React.createElement(RuntimeLineChart, {\n        title: \"Sense Cycle Runtime\",\n        data: cycleRuntimeData,\n        stroke1: \"#8884d8\",\n        stroke2: \"#82ca9d\",\n        stroke3: \"#eb8634\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(RuntimeLineChart, {\n        title: \"Sense Cycle Runtime (Integrated)\",\n        data: integratedCycleRuntimeData,\n        stroke1: \"#8884d8\",\n        stroke2: \"#82ca9d\",\n        stroke3: \"#eb8634\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })));\n    };\n\n    this.renderStackedCharts = () => {\n      console.log(\"rendering stack\");\n      return React.createElement(\"div\", {\n        className: \"chartsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"barCharts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Stacked Bar charts\"), React.createElement(StackedBarChart, {\n        title: \"Memory Consumption Ratio\",\n        data: stackedData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })));\n    };\n\n    this.renderLineCharts = () => {\n      console.log(\"rendering stack\");\n      return React.createElement(\"div\", {\n        className: \"chartsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"barCharts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Line charts\"), React.createElement(LineBarChart, {\n        title: \"Tflite / Flash Memory\",\n        data: lineData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        marginLeft: \"30px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"IoT Power Consumption Master Thesis 2020 Graphs\"), React.createElement(\"div\", {\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Display:\", React.createElement(\"select\", {\n      onChange: e => this.setState({\n        toDisplay: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: this.state.toDisplay === \"mem\",\n      value: \"mem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Memory charts\"), React.createElement(\"option\", {\n      selected: this.state.toDisplay === \"run\",\n      value: \"run\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Runtime charts\"), React.createElement(\"option\", {\n      selected: this.state.toDisplay === \"stack\",\n      value: \"stack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Stacked Bar charts\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.state.toDisplay === \"mem\" && this.renderMemoryCharts(), this.state.toDisplay === \"run\" && this.renderRuntimeCharts(), this.state.toDisplay === \"stack\" && this.renderStackedCharts(), this.state.toDisplay === \"line\" && this.renderLineCharts()));\n  }\n\n}\nMain.jsfiddleUrl = \"https://jsfiddle.net/alidingling/90v76x08/\";","map":{"version":3,"sources":["/Users/finn/Documents/skole/master_thesis/graph_generator/src/Main.js"],"names":["React","PureComponent","baseData","cycleData","adjustedCycleData","nnData","adjustedNnData","totalData","freeData","MemoryBarChart","MemoryPieChart","cycleRuntimeData","integratedCycleRuntimeData","RuntimeLineChart","StackedBarChart","stackedData","lineData","LineBarChart","Main","state","toDisplay","formatDataForPie","dataIndex","dataNames","map","dataPoint","i","name","value","used","renderMemoryCharts","console","log","marginLeft","renderRuntimeCharts","renderStackedCharts","renderLineCharts","render","e","setState","target","jsfiddleUrl"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport \"./App.css\";\nimport {\n  baseData,\n  cycleData,\n  adjustedCycleData,\n  nnData,\n  adjustedNnData,\n  totalData,\n  freeData,\n} from \"./memoryData\";\nimport MemoryBarChart from \"./MemoryBarChart\";\nimport MemoryPieChart from \"./MemoryPieChart\";\nimport { cycleRuntimeData, integratedCycleRuntimeData } from \"./runtimeData\";\nimport RuntimeLineChart from \"./RuntimeLineChart\";\nimport StackedBarChart from \"./StackedBarChart\";\nimport { stackedData } from \"./stackedData\";\nimport { lineData } from \"./lineData\";\nimport LineBarChart from \"./LineChart\";\n\nexport default class Main extends PureComponent {\n  static jsfiddleUrl = \"https://jsfiddle.net/alidingling/90v76x08/\";\n\n  state = {\n    toDisplay: \"line\",\n  };\n\n  formatDataForPie = (dataIndex) => {\n    const dataNames = [\"Overhead\", \"Cyclic\", \"Neural network\", \"Free\"];\n    return [baseData, adjustedCycleData, adjustedNnData, freeData].map(\n      (dataPoint, i) => ({\n        name: dataNames[i],\n        value: dataPoint[dataIndex].used,\n      })\n    );\n  };\n\n  renderMemoryCharts = () => {\n    console.log(\"rendering memory\");\n    return (\n      <div className=\"chartsContainer\">\n        <div className=\"barCharts\">\n          <h2 style={{ marginLeft: \"30px\" }}>Individual data points</h2>\n          <MemoryBarChart\n            title={\"Common memory overhead\"}\n            data={baseData}\n            heavyFillColor=\"#fcba03\"\n            lightFillColor=\"#ffe18f\"\n          />\n          <MemoryBarChart\n            title={\"Cyclic sensor memory footprint\"}\n            data={cycleData}\n            heavyFillColor=\"#199c52\"\n            lightFillColor=\"#82ca9d\"\n          />\n          <MemoryBarChart\n            title={\"Neural Network memory consumption\"}\n            data={nnData}\n            heavyFillColor=\"#65bfe0\"\n            lightFillColor=\"#b3e8fc\"\n          />\n        </div>\n        <div className=\"totalChart\">\n          <h2 style={{ marginLeft: \"30px\" }}>Total</h2>\n          <MemoryBarChart\n            title={\"Total memory usage at compile time\"}\n            data={totalData}\n            heavyFillColor=\"#35374a\"\n            lightFillColor=\"#adafc4\"\n          />\n          <MemoryPieChart\n            title={\"Program memory distribution\"}\n            data={this.formatDataForPie(0)}\n            colors={[\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"]}\n          />\n          <MemoryPieChart\n            title={\"Dynamic memory distribution\"}\n            data={this.formatDataForPie(1)}\n            colors={[\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"]}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  renderRuntimeCharts = () => {\n    console.log(\"rendering runtime\");\n    return (\n      <div className=\"chartsContainer\">\n        <div className=\"barCharts\">\n          <h2 style={{ marginLeft: \"30px\" }}>Sense Cycle Runtime</h2>\n          <RuntimeLineChart\n            title={\"Sense Cycle Runtime\"}\n            data={cycleRuntimeData}\n            stroke1=\"#8884d8\"\n            stroke2=\"#82ca9d\"\n            stroke3=\"#eb8634\"\n          />\n          <RuntimeLineChart\n            title={\"Sense Cycle Runtime (Integrated)\"}\n            data={integratedCycleRuntimeData}\n            stroke1=\"#8884d8\"\n            stroke2=\"#82ca9d\"\n            stroke3=\"#eb8634\"\n          />\n        </div>\n      </div>\n    );\n  };\n\n  renderStackedCharts = () => {\n    console.log(\"rendering stack\");\n    return (\n      <div className=\"chartsContainer\">\n        <div className=\"barCharts\">\n          <h2 style={{ marginLeft: \"30px\" }}>Stacked Bar charts</h2>\n          <StackedBarChart\n            title={\"Memory Consumption Ratio\"}\n            data={stackedData}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  renderLineCharts = () => {\n    console.log(\"rendering stack\");\n    return (\n      <div className=\"chartsContainer\">\n        <div className=\"barCharts\">\n          <h2 style={{ marginLeft: \"30px\" }}>Line charts</h2>\n          <LineBarChart title={\"Tflite / Flash Memory\"} data={lineData} />\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 style={{ marginLeft: \"30px\" }}>\n          IoT Power Consumption Master Thesis 2020 Graphs\n        </h1>\n        <div className=\"dropdown\">\n          Display:\n          <select\n            onChange={(e) => this.setState({ toDisplay: e.target.value })}\n          >\n            <option selected={this.state.toDisplay === \"mem\"} value=\"mem\">\n              Memory charts\n            </option>\n            <option selected={this.state.toDisplay === \"run\"} value=\"run\">\n              Runtime charts\n            </option>\n            <option selected={this.state.toDisplay === \"stack\"} value=\"stack\">\n              Stacked Bar charts\n            </option>\n          </select>\n        </div>\n        <div>\n          {this.state.toDisplay === \"mem\" && this.renderMemoryCharts()}\n          {this.state.toDisplay === \"run\" && this.renderRuntimeCharts()}\n          {this.state.toDisplay === \"stack\" && this.renderStackedCharts()}\n          {this.state.toDisplay === \"line\" && this.renderLineCharts()}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}